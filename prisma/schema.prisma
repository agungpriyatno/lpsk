// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ===== USERS =====

enum StatusPublication {
  PUBLISH
  TAKEDOWN
}

enum StatusDraft {
  ACCEPT
  REJECT
  PROCESS
}

model User {
  id          String        @id @default(cuid())
  roleId      String?       @map("role_id")
  name        String
  avatar      String?
  createdAt   DateTime      @default(now()) @map("created_at")
  updatedAt   DateTime      @updatedAt @map("updated_at")
  account     Account?
  role        Role?         @relation(fields: [roleId], references: [id], onDelete: SetNull)
  draft       Draft[]
  publication Publication[]

  @@map("users")
}

model Account {
  id           String        @id @default(cuid())
  userId       String        @unique @map("user_id")
  email        String        @unique
  hash         String
  verifiedAt   DateTime?     @map("verified_at")
  createdAt    DateTime      @default(now()) @map("created_at")
  updatedAt    DateTime      @updatedAt @map("updated_at")
  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  verification Verification?

  @@map("accounts")
}

model Role {
  id           String       @id @default(cuid())
  name         String
  descriptions String?
  createdAt    DateTime     @default(now()) @map("created_at")
  updatedAt    DateTime     @updatedAt @map("updated_at")
  modules      RoleModule[]
  users        User[]

  @@map("roles")
}

model Verification {
  id        String   @id @default(cuid())
  accountId String   @unique @map("account_id")
  account   Account  @relation(fields: [accountId], references: [id], onDelete: Cascade)
  expiredAt DateTime @map("expired_at")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("verifications")
}

model RoleModule {
  roleId     String
  moduleCode String @map("module_code")
  role       Role   @relation(fields: [roleId], references: [id], onDelete: Cascade)
  module     Module @relation(fields: [moduleCode], references: [code])

  @@id([roleId, moduleCode])
  @@map("role_modules")
}

model Aplication {
  id          String   @id @default(cuid())
  type        String
  name        String
  link        String
  images      String?
  description String?
  createdAt   DateTime @default(now()) @map("created_at")

  @@map("aplications")
}

model Draft {
  id            String                  @id @default(cuid())
  categoryId    String?                 @map("category_id")
  authorId      String?                 @map("author_id")
  publicationId String?                 @map("publication_id")
  subCategoryId String?                 @map("sub_category_id")
  thumbnail     String?
  title         String
  content       String?                 @db.Text
  sourceLink    String?
  videoLink     String?
  publishedAt   DateTime?               @default(now()) @map("published_at")
  createdAt     DateTime                @default(now()) @map("created_at")
  status        StatusDraft             @default(PROCESS)
  selected      Publication?
  publications  Publication?            @relation("draft", fields: [publicationId], references: [id], onDelete: Cascade)
  author        User?                   @relation(fields: [authorId], references: [id], onDelete: SetNull)
  category      PublicationCategory?    @relation(fields: [categoryId], references: [id], onDelete: SetNull)
  subCategory   PublicationSubCategory? @relation(fields: [subCategoryId], references: [id], onDelete: SetNull)
  media         DraftMedia[]
  vote          VoteDraft?

  @@map("drafts")
}

model Publication {
  id         String   @id @default(cuid())
  authorId   String?  @map("author_id")
  selectedId String?  @unique @map("selected_id")
  updatedAt  DateTime @updatedAt @map("updated_at")
  createdAt  DateTime @default(now()) @map("created_at")

  status   StatusPublication @default(PUBLISH)
  author   User?             @relation(fields: [authorId], references: [id], onDelete: SetNull)
  draft    Draft[]           @relation("draft")
  selected Draft?            @relation(fields: [selectedId], references: [id])

  @@map("publications")
}

model DraftMedia {
  draftId String @map("draft_id")
  mediaId String @map("media_id")
  draft   Draft  @relation(fields: [draftId], references: [id], onDelete: Cascade)
  media   Media  @relation(fields: [mediaId], references: [id], onDelete: Cascade)

  @@id([draftId, mediaId])
  @@map("draft_media")
}

model VoteDraft {
  draftId String @unique @map("draft_id")
  voteId  String @map("vote_id")

  draft Draft @relation(fields: [draftId], references: [id], onDelete: Cascade)
  vote  Vote  @relation(fields: [voteId], references: [id])

  @@id([draftId, voteId])
  @@map("vote_draft")
}

model Vote {
  id        String        @id @default(cuid())
  closedAt  DateTime      @map("closed_at")
  createdAt DateTime      @default(now()) @map("created_at")
  options   VoteOptions[]
  draft     VoteDraft[]

  @@map("votes")
}

model VoteOptions {
  id           String       @id @default(cuid())
  voteId       String       @map("vote_id")
  name         String
  descriptions String?
  thumbnail    String?
  client       VoteClient[]
  vote         Vote         @relation(fields: [voteId], references: [id])

  @@map("vote_options")
}

model VoteClient {
  clientId String @map("client_id")
  optionId String @map("option_id")

  client  Client      @relation(fields: [clientId], references: [id])
  options VoteOptions @relation(fields: [optionId], references: [id])

  @@id([clientId, optionId])
  @@map("vote_clients")
}

model Client {
  id         String       @id @default(cuid())
  name       String
  email      String       @unique
  verifiedAt DateTime?    @map("verified_at")
  createdAt  DateTime     @default(now()) @map("created_at")
  updatedAt  DateTime     @updatedAt @map("updated_at")
  vote       VoteClient[]

  @@map("clients")
}

// ===== DATA MASTER ======

model PublicationCategory {
  id        String                   @id @default(cuid())
  name      String
  createdAt DateTime                 @default(now()) @map("created_at")
  draft     Draft[]
  subs      PublicationSubCategory[]

  @@map("publication_categories")
}

model PublicationSubCategory {
  id         String              @id @default(cuid())
  categoryId String              @map("category_id")
  name       String
  createdAt  DateTime            @default(now()) @map("created_at")
  draft      Draft[]
  category   PublicationCategory @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  @@map("publication_subcategories")
}

model Media {
  id        String       @id @default(cuid())
  name      String
  createdAt DateTime     @default(now()) @map("created_at")
  draft     DraftMedia[]

  @@map("media")
}

model Module {
  code        String       @id
  name        String
  description String
  createdAt   DateTime     @default(now()) @map("created_at")
  roles       RoleModule[]

  @@map("modules")
}
