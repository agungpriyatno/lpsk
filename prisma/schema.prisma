// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ===== USERS =====

enum StatusPublication {
  PUBLISH
  TAKEDOWN
}

enum StatusDraft {
  ACCEPT
  REJECT
  PROCESS
}

model User {
  id        String   @id @default(cuid())
  roleId    String?  @map("role_id")
  name      String
  avatar    String?
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  account   Account?
  role      Role?    @relation(fields: [roleId], references: [id], onDelete: SetNull)

  @@map("users")
}

model Account {
  id           String        @id @default(cuid())
  userId       String        @unique @map("user_id")
  email        String        @unique
  hash         String
  verifiedAt   DateTime?     @map("verified_at")
  createdAt    DateTime      @default(now()) @map("created_at")
  updatedAt    DateTime      @updatedAt @map("updated_at")
  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  verification Verification?

  @@map("accounts")
}

model Role {
  id           String       @id @default(cuid())
  name         String
  descriptions String?
  createdAt    DateTime     @default(now()) @map("created_at")
  updatedAt    DateTime     @updatedAt @map("updated_at")
  modules      RoleModule[]
  users        User[]

  @@map("roles")
}

model Verification {
  id        String   @id @default(cuid())
  accountId String   @unique @map("account_id")
  account   Account  @relation(fields: [accountId], references: [id], onDelete: Cascade)
  expiredAt DateTime @map("expired_at")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("verifications")
}

model RoleModule {
  roleId     String
  moduleCode String @map("module_code")
  role       Role   @relation(fields: [roleId], references: [id], onDelete: Cascade)
  module     Module @relation(fields: [moduleCode], references: [code])

  @@id([roleId, moduleCode])
  @@map("role_modules")
}

model Module {
  code        String       @id
  name        String
  description String
  createdAt   DateTime     @default(now()) @map("created_at")
  roles       RoleModule[]

  @@map("modules")
}

model Aplication {
  id          String   @id @default(cuid())
  type        String
  name        String
  link        String
  images      String?
  description String?
  createdAt   DateTime @default(now()) @map("created_at")

  @@map("aplications")
}

model Draft {
  id           String            @id @default(cuid())
  thumbnail    String
  title        String
  content      String
  status       StatusDraft       @default(PROCESS)
  publishedAt  DateTime?         @default(now()) @map("published_at")
  createdAt    DateTime          @default(now()) @map("created_at")
  selected     Publication?
  publications DraftPublication?

  @@map("drafts")
}

model DraftPublication {
  draftId       String @unique @map("draft_id")
  publicationId String @map("publication_id")

  draft       Draft       @relation(fields: [draftId], references: [id])
  publication Publication @relation(fields: [publicationId], references: [id])

  @@id([draftId, publicationId])
  @@map("draft_publications")
}

model Publication {
  id         String   @id @default(cuid())
  status     String
  selectedId String   @unique @map("selected_id")
  updatedAt  DateTime @updatedAt @map("updated_at")
  createdAt  DateTime @default(now()) @map("created_at")

  selected Draft              @relation(fields: [selectedId], references: [id])
  draft    DraftPublication[]

  @@map("publications")
}
