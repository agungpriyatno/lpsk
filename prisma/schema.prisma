// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ===== USERS =====

model User {
  id        String    @id @default(cuid())
  name      String
  avatar    String?
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  account   Account?
  role      UserRole?

  @@map("users")
}

model Account {
  id           String        @id @default(cuid())
  userId       String        @unique
  email        String        @unique
  hash         String
  verifiedAt   DateTime?     @map("verified_at")
  createdAt    DateTime      @default(now()) @map("created_at")
  updatedAt    DateTime      @updatedAt @map("updated_at")
  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  verification Verification?

  @@map("accounts")
}

model UserRole {
  userId String @unique @map("user_id")
  roleId String @map("role_id")
  user   User   @relation(fields: [userId], references: [id])
  role   Role   @relation(fields: [roleId], references: [id])

  @@id([userId, roleId])
  @@unique([userId, roleId])
  @@map("user_roles")
}

model Role {
  id           String       @id @default(cuid())
  name         String
  descriptions String?
  createdAt    DateTime     @default(now()) @map("created_at")
  updatedAt    DateTime     @updatedAt @map("updated_at")
  role         UserRole[]
  modules      RoleModule[]

  @@map("roles")
}

model Verification {
  id        String   @id @default(cuid())
  accountId String   @unique
  account   Account  @relation(fields: [accountId], references: [id], onDelete: Cascade)
  expiredAt DateTime @map("expired_at")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("verifications")
}

model RoleModule {
  roleId     String
  moduleCode String
  role       Role   @relation(fields: [roleId], references: [id])
  module     Module @relation(fields: [moduleCode], references: [code])

  @@id([roleId, moduleCode])
  @@map("role_modules")
}

model Module {
  code        String       @id
  name        String
  description String
  createdAt   DateTime     @default(now()) @map("created_at")
  roles       RoleModule[]

  @@map("modules")
}

model Aplication {
  id        String   @id @default(cuid())
  type      String
  name      String
  link      String
  images    String?
  description String?
  createdAt DateTime @default(now()) @map("created_at")

  @@map("aplications")
}

// ===== POST =====

// model Draft {
//   id            String              @id @default(cuid())
//   thumbnail     String
//   title         String
//   content       String
//   publishedById String
//   typeCode      String
//   categoryId    String
//   publishedAt   DateTime            @default(now()) @map("published_at")
//   createdAt     DateTime            @default(now()) @map("created_at")
//   publication   Publication?
//   publications  PublicationDraft[]
//   publishedBy   User                @relation(fields: [publishedById], references: [id])
//   type          PublicationType     @relation(fields: [typeCode], references: [code])
//   category      PublicationCategory @relation(fields: [categoryId], references: [id])

//   @@map("draft")
// }

// model Publication {
//   id         String             @id @default(cuid())
//   selectedId String             @unique
//   statusCode String
//   selected   Draft              @relation(fields: [selectedId], references: [id], onDelete: Cascade)
//   draft      PublicationDraft[]
//   status     StatusType         @relation(fields: [statusCode], references: [code])

//   @@map("publications")
// }

// model PublicationDraft {
//   postId     String      @unique
//   draftId    String
//   statusCode String
//   status     StatusType  @relation(fields: [statusCode], references: [code])
//   post       Publication @relation(fields: [postId], references: [id], onDelete: Cascade)
//   draft      Draft       @relation(fields: [draftId], references: [id])

//   @@id([postId, draftId])
//   @@map("publication_draft")
// }

// // ====== DATA MASTER ======

// model PublicationType {
//   code       String                @id
//   name       String
//   createdAt  DateTime              @default(now()) @map("created_at")
//   categories PublicationCategory[]
//   Draft      Draft[]

//   @@map("publication_types")
// }

// model PublicationCategory {
//   id        String          @id @default(cuid())
//   typeCode  String
//   name      String
//   createdAt DateTime        @default(now()) @map("created_at")
//   type      PublicationType @relation(fields: [typeCode], references: [code])
//   draft     Draft[]

//   @@map("publication_categories")
// }

// model StatusType {
//   code        String             @id
//   name        String
//   createdAt   DateTime           @default(now()) @map("created_at")
//   draft       PublicationDraft[]
//   publication Publication[]

//   @@map("status_types")
// }
